<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo&amp;Butterfly搭建博客</title>
    <url>/2022/01/05/Hexo&amp;Butterfly%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1>Hexo搭建博客</h1>
<p>以下命令都在<u>管理员身份</u>的 <code>GitBash</code> 中敲</p>
<p><strong>本地生成博客文件，并访问</strong> ：</p>
<p>先找一个存博客的目录，新建目录blog，进去打开GitBash。再执行以下命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli      	  	  npm全局安装hexo</span><br><span class="line">hexo init							初始化目录，生成一堆乱七八糟的文件和文件夹</span><br><span class="line">hexo s								本地运行，本地访问，默认端口<span class="number">4000</span>， 地址是http:<span class="comment">//localhost:4000/    </span></span><br><span class="line">Ctrl+C								取消运行</span><br><span class="line">hexo n <span class="string">&quot;第一篇MarkDown格式的博客&quot;</span>      	在blog下source\_posts下，用typora等md编辑软件编辑，随便写点字，写点格式进去</span><br><span class="line">hexo clean 			 				清理</span><br><span class="line">hexo g 						    	生成静态文件   </span><br></pre></td></tr></table></figure>
<p><strong>GitHub托管博客，所有人都可以访问</strong> ：</p>
<blockquote>
<p>Github创建一个新的public仓库    <a href="http://xn--GitHub-on9im33ani7axo6bfb0c.github.io">你的GitHub账户名.github.io</a>     严格要求是这个名字</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git 				#在blog目录下安装git部署插件 </span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置Hexo配置文件_config.yml， 在blog目录下</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">    repo: https:<span class="comment">//github.com/你的GitHub账户名/你的GitHub账户名.github.io.git</span></span><br><span class="line">	branch: master</span><br><span class="line">注意：冒号后面有空格的！！ 如果懒得注意，建议直接复制        </span><br></pre></td></tr></table></figure>
<blockquote>
<p>部署博客到 GitHub，就可以远程访问了</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo d         部署</span><br><span class="line">或者</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d      清理缓存+生成静态文件+部署        </span><br></pre></td></tr></table></figure>
<p><code>https://你的GitHub账户名.github.io</code>  大功告成！ 这就是你的博客了</p>
<p><strong>注意点</strong>：</p>
<ol>
<li>报错，可能是没有以<strong>管理员模式</strong>打开<code>GitBash</code> ，有时候一些让人生气的bug，就是这种细节，知道是这个原因之后，更让人生气了！</li>
<li>部署不上GitHub，以下解决办法，都可以试试
<ul>
<li>改<code>repo</code> 后面的为 <code>git@github.com:你的GitHub账户名/你的GitHub账户名.github.io.git</code></li>
<li>改<code>branch</code>值为 <code>main</code></li>
<li>网太烂了，拨打10086升级宽带</li>
<li>单纯连不上GitHub，寻求周围 程序猿/媛 帮助</li>
</ul>
</li>
<li>Git 没绑定 GitHub 账号，查看前文Git安装配置</li>
</ol>
<h1>Butterfly主题</h1>
<p>进到Hexo博客根目录，打开GitBash，下载 <code>Butterfly</code> 主题 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<p>改Hexo博客根目录下的 <code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">改为</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>
<p>清理缓存、生成静态文件、部署到 <code>GitHub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p><strong>主题美化</strong></p>
<blockquote>
<p>官网权威文档：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p>
<p>参考链接：<a href="https://blog.csdn.net/weixin_44186409/article/details/106256493">butterfly主题修改_bt-sonny的博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Tool</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Tutorial</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Tutorial</title>
    <url>/2022/12/04/Docker-Tutorial/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_39135287/category_9492725.html"> Docker入门到实践</a></p>
<p><a href="https://www.docker.org.cn/book/install/rhel-docker-dependance-28.html">docker中文社区</a></p>
<p><a href="https://vuepress.mirror.docker-practice.com/introduction/what/">什么是 Docker | docker-practice.com</a></p>
<p>docker-ce引擎版本：20.10.16</p>
<p>id可以只打前几位，能区分就行。</p>
<p>不推荐装MySql</p>
<p><strong>查找容器两法</strong></p>
<ul>
<li>容器id</li>
<li>容器名:tag    — tag通过images可以查，不能省tag！！ （latest的tag可以省</li>
</ul>
<h1>名词概念</h1>
<p><strong>容器  &gt;  镜像  &gt;  程序</strong></p>
<ul>
<li>**dockfile：**自动化的脚本，自动创建镜像Image。</li>
<li><strong>Image镜像：</strong>  相当于虚拟机的快照，通过一个镜像可以创建多个容器。    ----   像应用商店的APP、Cent7.iso
<ul>
<li>tomcat镜像 ===&gt; run  ==&gt;tomcat容器（提供服务器），最终在容器中跑项目。</li>
<li>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</li>
<li>所有的应用，直接打包 <code>Docker</code> 镜像，就可以直接跑起来！       得到镜像的方法如下
<ul>
<li>从远程仓库下载</li>
<li>朋友拷贝给你</li>
<li>自己制作一个镜像 <code>DockerFile</code></li>
</ul>
</li>
</ul>
</li>
<li><strong>Container容器：</strong> 相当于虚拟机，有着一整套的环境，和其他环境互不干扰。  被一个进程管理，进程停，容器停。  —虚拟机</li>
<li><strong>仓库Repository：</strong>  存放镜像的地方！！ 类似Maven仓库，分为公有和私有。
<ul>
<li>例子：默认Docker Hub国外慢，阿里云镜像加速快</li>
</ul>
</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415882.png" alt="image-20220526234442510"/>
<p>相较于以往的jar包部署，Docker更方便部署。</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415884.png" alt="image-20220526230512571" style="zoom:80%;" />
<h1>虚拟、容器技术</h1>
<h2 id="1、传统虚拟技术"><a class="header-anchor" href="#1、传统虚拟技术">¶</a>1、传统虚拟技术</h2>
<p><strong>加载Guest OS</strong></p>
<p>每次新建都需重新加载内核，进行引导</p>
<p><strong>须要虚拟的有：</strong></p>
<blockquote>
<p>硬件、操作系统、内核。   — 典例：虚拟机</p>
</blockquote>
<p><img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415885.png" alt="image-20220526232235444"></p>
<h2 id="2、Docker虚拟技术"><a class="header-anchor" href="#2、Docker虚拟技术">¶</a>2、Docker虚拟技术</h2>
<p><strong>有着更少的抽象层</strong></p>
<p><strong>方便的升级和扩缩容</strong></p>
<p>项目打包为一个镜像，须要升级时升级镜像即可。</p>
<p><strong>操作系统层面</strong>的虚拟化技术，利用宿主机的内核</p>
<blockquote>
<p>无硬件、无OS，新建容器无需重新加载内核，更加轻便。</p>
</blockquote>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415886.png" alt="image-20220526233237679" style="zoom:50%;" />
<h1>安装Docker</h1>
<p><a href="https://blog.csdn.net/u014069688/article/details/100532774?">Centos7下安装Docker</a></p>
<p><a href="https://blog.csdn.net/cbh1987/article/details/120481157">Centos7安装docker</a></p>
<p>使用虚拟机192.168.86.128安装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 查看内核版本   --- 要高于<span class="number">3.10</span></span><br><span class="line">[root<span class="meta">@lzwEdu01</span> ~]# uname -r</span><br><span class="line"><span class="number">3.10</span><span class="number">.0</span>-<span class="number">957.</span>el7.x86_64</span><br><span class="line"></span><br><span class="line"># 查看OS    </span><br><span class="line">[root<span class="meta">@lzwEdu01</span> ~]# cat /etc/os-release</span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span>    </span><br></pre></td></tr></table></figure>
<p>帮助文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、卸载之前的docker</span><br><span class="line">    sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-selinux \</span><br><span class="line">                docker-engine-selinux \</span><br><span class="line">                docker-engine</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">    sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">    </span><br><span class="line"># <span class="number">3</span>、设置yum的docker的源（默认国外，改为阿里云</span><br><span class="line">国外慢：    https:<span class="comment">//download.docker.com/linux/centos/docker-ce.repo </span></span><br><span class="line">阿里云快：    yum-config-manager --add-repo http:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"># 狂神额外更新索引</span><br><span class="line">    yum makecache fast</span><br><span class="line">    </span><br><span class="line"># <span class="number">4</span>、安装docker引擎，是引擎哦  （docker-ce社区版，ee商业版</span><br><span class="line">    查看可安装的版本  yum list docker-ce --showduplicates | sort -r</span><br><span class="line">    安装最新版   yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">    </span><br><span class="line"># <span class="number">5</span>、看版本 </span><br><span class="line">    docker version    </span><br><span class="line">    </span><br><span class="line"># <span class="number">6</span>、启动docker</span><br><span class="line">    systemctl start docker</span><br><span class="line">    </span><br><span class="line"># <span class="number">7</span>、运行hello world （先拉取镜像hello-world</span><br><span class="line">    docker run hello-world</span><br></pre></td></tr></table></figure>
<p>默认工作目录：<code>/var/lib/docker</code></p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415888.png" alt="image-20220527003822222" style="zoom:80%;" />
<hr>
<h1>阿里云镜像加速</h1>
<p><strong>可以省略</strong></p>
<p>支付宝阿里云账号</p>
<p>搜索：云服务 —&gt; 容器镜像服务  —&gt;  镜像工具  —&gt;  镜像加速器  —&gt; CentOs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://4gf7t49m.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">    </span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker      --- 重启</span><br></pre></td></tr></table></figure>
<hr>
<h1>HelloWorld回顾</h1>
<p><code>docker run hello-world</code> 命令的步骤有：</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415889.png" alt="image-20220527122342623" style="zoom:80%;" />
<hr>
<h1>底层原理</h1>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212051415890.png" alt="image-20220527123137397" style="zoom:80%;" />
]]></content>
      <categories>
        <category>Tool</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Tutorial</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置&amp;GitHub绑定</title>
    <url>/2022/10/05/Git%E9%85%8D%E7%BD%AE&amp;GitHub%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1>Git安装配置，绑定GitHub账号</h1>
<p><strong>下载</strong>：搜索Git官网，下载64位setup，如Git-2.32.0-64-bit.exe</p>
<p><strong>安装</strong> ：无脑下一步，Git Bash是Git的命令行，如果选了只GitBash，那在cmd中使用git会报’git’ 不是内部或外部命令，解决办法是把Git安装文件夹下bin目录、git-core加入到环境变量中。</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212061915388.png" alt="image-20221206191429644" style="zoom:80%;" />
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212071100043.png" alt="image-20221206191639793" style="zoom:80%;" />
<p><strong>设置用户全局签名</strong> ： 会记录在 <code>C:\users\用户\.gitconfig</code>里面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;账户名&quot;</span>       账户名随便写几个字母</span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱地址&quot;</span>     邮箱随便写，瞎写都行。</span><br><span class="line">git config --global --<span class="built_in">list</span>				查看写对了吗    </span><br></pre></td></tr></table></figure>
<p><strong>配置Git绑定GitHub</strong>：</p>
<p>鼠标右键选GitBash，输入 <code>ssh-keygen -t rsa</code> ，显示overwrite时输入y，其他时候按三次回车。</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062145500.png" alt="image-20221206214526322" style="zoom:80%;" />
<p>之后在<code>C:\Users\用户\.ssh</code>下，有一个rsa后缀的私钥文件，要严密保管。 有一个pub后缀的公钥文件，复制公钥的内容，到GitHub网站你头像下面settings -&gt; SSH and GPG keys -&gt; new SSH key，Title随便写，Key部分填你的公钥内容。</p>
<p>在 <code>GitBash</code> 中输入 <code>ssh -T git@github.com</code> ，看到有successfully就说明绑定好了。</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062146968.png" alt="image-20221206214628634" style="zoom:80%;" />
<p>参考链接：跳转前可以给我点一个赞吗，拜托拜托`(<em>&gt;﹏&lt;</em>)′   <a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Windows系统Git安装教程-博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Tutorial</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora&amp;PicGo博客图床搭建</title>
    <url>/2022/12/06/Typora&amp;PicGo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1>图床存图片，哪哪都能看</h1>
<p>本人使用 <code>Typora</code> 编辑Markdown文档来上传到博客，但本地图片上传到GitHub博客，就没法看了，为此寻找了多种方法。 最后选择了阿里云OSS存储作为图床，<code>PicGo</code>软件上传，<code>Typora</code>引用网址的方式</p>
<h2 id="1、本地同名文件夹引用，失效"><a class="header-anchor" href="#1、本地同名文件夹引用，失效">¶</a>1、本地同名文件夹引用，失效</h2>
<ol>
<li>下载处理图片的插件</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install https:<span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span><br><span class="line">或</span><br><span class="line">npm install hexo-asset-img --save    </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>在Hexo配置文件将配置项post_asset_folder设为true</p>
</li>
<li>
<p>设置Typora放图片的方式，自动把图片放到同名文件夹下</p>
</li>
</ol>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062229102.png" alt="image-20221206222940084" style="zoom:80%;" />
<ol start="4">
<li>执行命令 <code>hexo new article_name</code>，在source/_posts中会生成文章article_name.md和同名文件夹article_name。将图片资源放在article_name文件夹中，文章就可以使用相对路径引用图片资源了。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">![可选图片描述](文章名/图片名.png)  </span><br></pre></td></tr></table></figure>
<h2 id="2、GitHub图床，失效"><a class="header-anchor" href="#2、GitHub图床，失效">¶</a>2、GitHub图床，失效</h2>
<ul>
<li>登录自己的github，建立一个<strong>公开</strong>的仓库，用于存储图片</li>
<li>进入personal settings -&gt; developer settings -&gt; personal access tokens -&gt; generate new token</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062237974.png" alt="image-20221206223720588" style="zoom:80%;" />
<ul>
<li>生成token信息，及时复制出现的token</li>
<li>下载Windows的PicGo的exe文件，如PicGo-Setup-2.3.0-x64.exe，  链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></li>
<li>设置PicGo，开启<strong>时间戳重命名</strong>。</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062240680.png" alt="image-20221206224009940" style="zoom:80%;" />
<ul>
<li>Typora设置</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062241782.png" alt="image-20221206224141673" style="zoom:80%;" />
<ul>
<li>点击<strong>验证图片上传选项</strong> ，看到success就大功告成！</li>
</ul>
<h2 id="3、Gitee图床，失效"><a class="header-anchor" href="#3、Gitee图床，失效">¶</a>3、Gitee图床，失效</h2>
<p><u>设置方式和GitHub图床类似</u></p>
<p><strong>在不好用这方面，和GitHub图床类似，水平十分接近。 Gitee网速稍微快一点</strong></p>
<p>Typora把图片给PicGo，PicGo用于上传，Gitee仓库用于存放图片。</p>
<ul>
<li>GitHub单仓库1Gb~5GB，单文件最大100MB</li>
<li>Gitee单仓库最大500MB，单文件最大50M，总仓库5GB；</li>
</ul>
<blockquote>
<p>Gitee用于图床的个人密钥：xxxxxxxxxxx ， 被PicGo用于上传图片，让Gitee知道是自己人。 但查看图片不限于自己人<br>
<code>https://gitee.com/码云账户名/仓库名/raw/master/</code> 图片存时，前缀地址<br>
图片每次都会暂时存在<code>C:/Users/用户/AppData/Roaming/Typora/typora-user-images</code>， 害怕它会越存越大，解决办法是：先保存在./pictures下，需要时再上传到图床。<br>
可以一次性上传所有本地pictures， “格式” -&gt; “图像” -&gt; “上传所有本地图片” （不用担心上传几百张，它只上传当下folder的pictures</p>
</blockquote>
<p>参考链接：<a href="https://cloud.tencent.com/developer/article/1801576">https://cloud.tencent.com/developer/article/1801576</a></p>
<h2 id="4、阿里云OSS图床，最终方案"><a class="header-anchor" href="#4、阿里云OSS图床，最终方案">¶</a>4、阿里云OSS图床，最终方案</h2>
<h3 id="4-1-开通OSS对象存储"><a class="header-anchor" href="#4-1-开通OSS对象存储">¶</a>4.1 开通OSS对象存储</h3>
<p>在阿里云官网OSS <a href="https://www.aliyun.com/product/oss">对象存储OSS_云存储服务_-阿里云 (aliyun.com)</a> 点击 “立即开通”</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070032355.png" alt="image-20221206233659678" style="zoom:80%;" />
<p>注册账户，实名。  （如果是新用户，还可以超低价买云服务器，可以用来练习Linux命令、部署网站等）</p>
<p>点击oss页面 “管理控制台”</p>
<h3 id="4-2-创建Bucket"><a class="header-anchor" href="#4-2-创建Bucket">¶</a>4.2 创建Bucket</h3>
<p>在<a href="https://oss.console.aliyun.com/bucket">OSS管理控制台 (aliyun.com)</a> 创建Bucket</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070032356.png" alt="image-20221206234124640" style="zoom:80%;" />
<blockquote>
<ol>
<li>Bucket名称不能有大写字母，不能中文。 建议全小写英文，中间以<code>-</code>连接。如 <code>blog-img-oss</code></li>
<li>服务器选离自己近的</li>
<li>Endpoint默认，所属资源组默认</li>
<li>存储类型： <strong>标准存储</strong>（因为博客网所需流量和容量大，如果访问很少选<u>低频访问存储</u>）</li>
<li>读写权限： 一定要是<strong>公共读</strong>！ (私有别人看不了你图片，公共读写太危险)</li>
<li>其余的，都不听不要不开通！！ HDFS服务、冗余存储、版本控制、加密方式、日志查询、定时备份</li>
</ol>
</blockquote>
<p>复制你的地域节点，如<code>oss-cn-beijing</code> ，后面的 <code>.aliyuncs.com</code> 不复制。</p>
<h3 id="4-3-复制AccessKey和AccessKeySecret"><a class="header-anchor" href="#4-3-复制AccessKey和AccessKeySecret">¶</a>4.3 复制AccessKey和AccessKeySecret</h3>
<p>依次点击 <u>头像</u> -&gt; AccessKey管理 -&gt; 继续使用AccessKey -&gt; 创建AccessKey</p>
<p>一系列操作后，复制你的<code>accessKeyId</code>和<code>accessKeySecret</code></p>
<p><img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070004317.png" alt=""></p>
<h3 id="4-4-充钱"><a class="header-anchor" href="#4-4-充钱">¶</a>4.4 充钱</h3>
<p>见名知意，阿里云首页-&gt;费用</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070008232.png" alt="image-20221207000842470" style="zoom:80%;" />
<p>主要分容量和流量(流入/留出)，费用很便宜</p>
<ul>
<li>容量：0.12元/GB/月</li>
<li>图片<strong>上传</strong>到阿里OSS流量：免费</li>
<li>用户查看你的博客图片，<strong>流出</strong>流量： 闲时<u>0.25元/GB</u>，忙时<u>0.50元/GB</u></li>
</ul>
<h3 id="4-5-PicGo图床设置"><a class="header-anchor" href="#4-5-PicGo图床设置">¶</a>4.5 PicGo图床设置</h3>
<p>刚复制的那些内容派上用场了，点击确定，设为默认图床。</p>
<p>PicGo设置开启 “时间戳重命名”</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070016467.png" alt="image-20221207001600070" style="zoom:80%;" />
<h3 id="4-6-Typora设置"><a class="header-anchor" href="#4-6-Typora设置">¶</a>4.6 Typora设置</h3>
<p>验证成功，直接在Typora粘贴图片，自动由PicGo上传到OSS。</p>
<p>图片链接如：<a href="https://xn--Bucket-on9im33a.xn--6qq04ao0deyay3ll6f.aliyuncs.com/%E4%BD%A0%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/%E5%9B%BE%E7%89%87%E5%90%8D">https://你Bucket名.你存储区域名.aliyuncs.com/你存储路径/图片名</a></p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070022192.png" alt="image-20221207002129577" style="zoom:80%;" />]]></content>
      <categories>
        <category>Tool</category>
        <category>图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>PicGo</tag>
        <tag>Typora</tag>
        <tag>OSS</tag>
        <tag>Aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2>
<h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub托管Hexo博客搭建全过程</title>
    <url>/2022/12/04/GitHub%E6%89%98%E7%AE%A1Hexo%E5%8D%9A%E5%AE%A2%20Butterfly%E4%B8%BB%E9%A2%98%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>本教程长期更新。</p>
<p><strong>前言</strong> : 折腾了好久我的Hexo Butterfly主题博客，中间经历无数令人抓狂的bug，深感个人博客搭建不易，在此写下保姆级全流程教程，希望充当集锦和回忆录，帮助博客新手避坑。遇到了什么困难都可以评论，知无不言。</p>
<p><strong>环境</strong> : Windows 10 64位，Linux和MacOS会有差别，但流程差不多</p>
<p><strong>优秀博客案例欣赏：</strong>  <a href="https://lzw-github.github.io/">Hexo - WinstonLi的个人博客 (lzw-github.github.io)</a></p>
<div class="aplayer" data-id="000PeZCQ1i4XVs" data-server="tencent" data-type="artist" data-mutex="true" data-preload="auto" data-theme="#3F51B5"></div>
<h1>Git安装配置，绑定GitHub账号</h1>
<p><strong>下载</strong>：搜索Git官网，下载64位setup，如Git-2.32.0-64-bit.exe</p>
<p><strong>安装</strong> ：无脑下一步，Git Bash是Git的命令行，如果选了只GitBash，那在cmd中使用git会报’git’ 不是内部或外部命令，解决办法是把Git安装文件夹下bin目录、git-core加入到环境变量中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Git安装目录\bin</span><br><span class="line"></span><br><span class="line">Git安装目录\mingw64\libexec\git-core</span><br></pre></td></tr></table></figure>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212061915388.png" alt="image-20221206191429644" style="zoom:80%;" />
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212071100043.png" alt="image-20221206191639793" style="zoom:80%;" />
<p><strong>设置用户全局签名</strong> ： 会记录在 <code>C:\users\用户\.gitconfig</code>里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;账户名&quot;       账户名随便写几个字母</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;     邮箱随便写，瞎写都行。</span><br><span class="line">git config --global --list				查看写对了吗    </span><br></pre></td></tr></table></figure>
<p><strong>配置Git绑定GitHub</strong>：</p>
<p>鼠标右键选GitBash，输入 <code>ssh-keygen -t rsa</code> ，显示overwrite时输入y，其他时候按三次回车。</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062145500.png" alt="image-20221206214526322" style="zoom:80%;" />
<p>之后在<code>C:\Users\用户\.ssh</code>下，有一个rsa后缀的私钥文件，要严密保管。 有一个pub后缀的公钥文件，复制公钥的内容，到GitHub网站你头像下面settings -&gt; SSH and GPG keys -&gt; new SSH key，Title随便写，Key部分填你的公钥内容。</p>
<p>在 <code>GitBash</code> 中输入 <code>ssh -T git@github.com</code> ，看到有successfully就说明绑定好了。</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062146968.png" alt="image-20221206214628634" style="zoom:80%;" />
<p>参考链接：跳转前可以给我点一个赞吗，拜托拜托`(<em>&gt;﹏&lt;</em>)′   <a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Windows系统Git安装教程-博客园 (cnblogs.com)</a></p>
<h1>nvm安装配置</h1>
<p>推荐使用NodeJs的版本管理工具nvm，安装node更容易，允许多个node版本共存，切换方便。</p>
<p><strong>完全卸载NodeJS</strong> ：</p>
<ol>
<li>控制面板卸载NodeJS，更推荐使用Geek Uninstaller和Wise Program Uninstaller</li>
<li>重启任务管理器，鲨掉所有与node有关进程。</li>
<li>删掉 <code>C:\Users\admin\.npmrc</code> 文件</li>
<li>寻找以下目录删掉
<ul>
<li>C:\Program Files (x86)\nodejs</li>
<li>C:\Program Files\nodejs</li>
<li>C:\Users\用户名\AppData\Roaming\npm</li>
<li>C:\Users\用户名\AppData\Roaming\npm-cache</li>
</ul>
</li>
<li>删有关node的环境变量。</li>
</ol>
<p><strong>下载安装nvm</strong>：</p>
<p>下载前确定node已经卸载干净。到<a href="https://github.com/coreybutler/nvm-windows/releases">github.com</a> 该网址的下载nvm-setup.zip或nvm-setup.exe</p>
<p>双击安装exe，一路猛戳下一步，默认下载到 <code>C:\Users\用户\AppData\Roaming\nvm</code></p>
<blockquote>
<p>安装好nvm后，由于国内下载速度慢，所以使用淘宝镜像。在nvm安装目录下找到settings.txt文件。在最后面回车加上：</p>
<p>node_mirror: <a href="http://npm.taobao.org/mirrors/node/">http://npm.taobao.org/mirrors/node/</a></p>
<p>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p>
</blockquote>
<p><strong>nvm常用命令</strong> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm list   				看本地有哪些版本NodeJs，正在使用的NodeJs会用*号标识</span><br><span class="line">nvm list available    		看网上有哪些可以下载的node版本</span><br><span class="line">nvm install 16.16.0    		下载16.16.0版本的NodeJs到nvm安装目录</span><br><span class="line">nvm uninstall 16.16.0  		 卸载16。16.0的NodeJs    </span><br><span class="line">nvm use 16.16.0   使用node    </span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="https://blog.csdn.net/lewky_liu/article/details/87959839">Windows完全卸载node.js并安装node.js的多版本管理工具nvm</a></p>
<h1>NodeJS</h1>
<p><strong>NodeJS介绍</strong>：简称 <code>node</code> ，类似后端语言的JavaScript环境，本质上是浏览器底层，自带的包管理器npm在前端能充当Maven一样的角色。</p>
<p><strong>node版本</strong>：2022年Hexo要求<u>Node版本必须14以上</u>，推荐16或18，太高或者太低都不好。 另外，Node版本选双不选单。</p>
<p><strong>下载安装</strong>： 直接用nvm下载node</p>
<blockquote>
<p>切换node或是<code>nvm use 16.16.0</code> 之前，需要先把<code>C:\Users\用户\.npmrc</code> 文件删掉，就像之前的卸载node一样。</p>
<p>再执行以下命令</p>
<p>npm cache clean --force                  清理缓存</p>
<p>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a>       node使用淘宝代理链接</p>
<p>npm config set cache “C:\Users\用户\AppData\Roaming\nvm\v版本号\node_cache”     node_cache文件夹没有则新建</p>
<p>npm config set prefix “C:\Users\用户\AppData\Roaming\nvm\v版本号\node_global”      node_global文件夹没有则新建</p>
</blockquote>
<p><strong>node和npm常用命令</strong> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v    		看node版本</span><br><span class="line">npm -v    		看npm版本</span><br><span class="line">npm config list   			看npm配置项    </span><br><span class="line">npm config get registry     看是否在使用淘宝代理链接</span><br><span class="line">npm install 某           下载某依赖</span><br><span class="line">npm uninstall 某 -g       全局下载某依赖    </span><br><span class="line">npm uninstall 某  		卸载某依赖    </span><br></pre></td></tr></table></figure>
<p>参考链接：跳转前可以给我点一个赞吗，拜托拜托`(<em>&gt;﹏&lt;</em>)′  <a href="https://blog.csdn.net/Kenvinxu/article/details/106053210">https://blog.csdn.net/Kenvinxu/article/details/106053210</a></p>
<p>官网版本：<a href="https://nodejs.org/zh-cn/download/releases/">以往的版本 | Node.js (nodejs.org)</a></p>
<h1>Hexo搭建博客</h1>
<p>以下命令都在<u>管理员身份</u>的 <code>GitBash</code> 中敲</p>
<p><strong>本地生成博客文件，并访问</strong> ：</p>
<p>先找一个存博客的目录，新建目录blog，进去打开GitBash。再执行以下命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli      	  	  npm全局安装hexo</span><br><span class="line">hexo init							初始化目录，生成一堆乱七八糟的文件和文件夹</span><br><span class="line">hexo s								本地运行，本地访问，默认端口<span class="number">4000</span>， 地址是http:<span class="comment">//localhost:4000/    </span></span><br><span class="line">Ctrl+C								取消运行</span><br><span class="line">hexo n <span class="string">&quot;第一篇MarkDown格式的博客&quot;</span>      	在blog下source\_posts下，用typora等md编辑软件编辑，随便写点字，写点格式进去</span><br><span class="line">hexo clean 			 				清理</span><br><span class="line">hexo g 						    	生成静态文件   </span><br></pre></td></tr></table></figure>
<p><strong>GitHub托管博客，所有人都可以访问</strong> ：</p>
<blockquote>
<p>Github创建一个新的public仓库    <a href="http://xn--GitHub-on9im33ani7axo6bfb0c.github.io">你的GitHub账户名.github.io</a>     严格要求是这个名字</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git 				#在blog目录下安装git部署插件 </span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置Hexo配置文件_config.yml， 在blog目录下</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">    repo: https:<span class="comment">//github.com/你的GitHub账户名/你的GitHub账户名.github.io.git</span></span><br><span class="line">	branch: master</span><br><span class="line">注意：冒号后面有空格的！！ 如果懒得注意，建议直接复制        </span><br></pre></td></tr></table></figure>
<blockquote>
<p>部署博客到 GitHub，就可以远程访问了</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo d         部署</span><br><span class="line">或者</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d      清理缓存+生成静态文件+部署        </span><br></pre></td></tr></table></figure>
<p><code>https://你的GitHub账户名.github.io</code>  大功告成！ 这就是你的博客了</p>
<p><strong>注意点</strong>：</p>
<ol>
<li>报错，可能是没有以<strong>管理员模式</strong>打开<code>GitBash</code> ，有时候一些让人生气的bug，就是这种细节，知道是这个原因之后，更让人生气了！</li>
<li>部署不上GitHub，以下解决办法，都可以试试
<ul>
<li>改<code>repo</code> 后面的为 <code>git@github.com:你的GitHub账户名/你的GitHub账户名.github.io.git</code></li>
<li>改<code>branch</code>值为 <code>main</code></li>
<li>网太烂了，拨打10086升级宽带</li>
<li>单纯连不上GitHub，寻求周围 程序猿/媛 帮助</li>
</ul>
</li>
<li>Git 没绑定 GitHub 账号，查看前文Git安装配置</li>
</ol>
<h1>Butterfly主题</h1>
<p>进到Hexo博客根目录，打开GitBash，下载 <code>Butterfly</code> 主题 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<p>改Hexo博客根目录下的 <code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">改为</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>
<p>清理缓存、生成静态文件、部署到 <code>GitHub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p><strong>主题美化</strong></p>
<blockquote>
<p>官网权威文档：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p>
<p>参考链接：<a href="https://blog.csdn.net/weixin_44186409/article/details/106256493">butterfly主题修改_bt-sonny的博客</a></p>
<p><a href="https://blog.csdn.net/Brad_PiTt7/article/details/125712874">Hexo 个人博客搭建完整版</a></p>
</blockquote>
<h1>图床存图片，哪哪都能看</h1>
<p>本人使用 <code>Typora</code> 编辑Markdown文档来上传到博客，但本地图片上传到GitHub博客，就没法看了，为此寻找了多种方法。 最后选择了阿里云OSS存储作为图床，<code>PicGo</code>软件上传，<code>Typora</code>引用网址的方式</p>
<h2 id="1、本地同名文件夹引用，失效"><a class="header-anchor" href="#1、本地同名文件夹引用，失效">¶</a>1、本地同名文件夹引用，失效</h2>
<ol>
<li>下载处理图片的插件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br><span class="line">或</span><br><span class="line">npm install hexo-asset-img --save    </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>在Hexo配置文件将配置项post_asset_folder设为true</p>
</li>
<li>
<p>设置Typora放图片的方式，自动把图片放到同名文件夹下</p>
</li>
</ol>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062229102.png" alt="image-20221206222940084" style="zoom:80%;" />
<ol start="4">
<li>执行命令 <code>hexo new article_name</code>，在source/_posts中会生成文章article_name.md和同名文件夹article_name。将图片资源放在article_name文件夹中，文章就可以使用相对路径引用图片资源了。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">![可选图片描述](文章名/图片名.png)  </span><br></pre></td></tr></table></figure>
<h2 id="2、GitHub图床，失效"><a class="header-anchor" href="#2、GitHub图床，失效">¶</a>2、GitHub图床，失效</h2>
<ul>
<li>登录自己的github，建立一个<strong>公开</strong>的仓库，用于存储图片</li>
<li>进入personal settings -&gt; developer settings -&gt; personal access tokens -&gt; generate new token</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062237974.png" alt="image-20221206223720588" style="zoom:80%;" />
<ul>
<li>生成token信息，及时复制出现的token</li>
<li>下载Windows的PicGo的exe文件，如PicGo-Setup-2.3.0-x64.exe，  链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></li>
<li>设置PicGo，开启<strong>时间戳重命名</strong>。</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062240680.png" alt="image-20221206224009940" style="zoom:80%;" />
<ul>
<li>Typora设置</li>
</ul>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212062241782.png" alt="image-20221206224141673" style="zoom:80%;" />
<ul>
<li>点击<strong>验证图片上传选项</strong> ，看到success就大功告成！</li>
</ul>
<h2 id="3、Gitee图床，失效"><a class="header-anchor" href="#3、Gitee图床，失效">¶</a>3、Gitee图床，失效</h2>
<p><u>设置方式和GitHub图床类似</u></p>
<p><strong>在不好用这方面，和GitHub图床类似，水平十分接近。 Gitee网速稍微快一点</strong></p>
<p>Typora把图片给PicGo，PicGo用于上传，Gitee仓库用于存放图片。</p>
<ul>
<li>GitHub单仓库1Gb~5GB，单文件最大100MB</li>
<li>Gitee单仓库最大500MB，单文件最大50M，总仓库5GB；</li>
</ul>
<blockquote>
<p>Gitee用于图床的个人密钥：xxxxxxxxxxx ， 被PicGo用于上传图片，让Gitee知道是自己人。 但查看图片不限于自己人<br>
<code>https://gitee.com/码云账户名/仓库名/raw/master/</code> 图片存时，前缀地址<br>
图片每次都会暂时存在<code>C:/Users/用户/AppData/Roaming/Typora/typora-user-images</code>， 害怕它会越存越大，解决办法是：先保存在./pictures下，需要时再上传到图床。<br>
可以一次性上传所有本地pictures， “格式” -&gt; “图像” -&gt; “上传所有本地图片” （不用担心上传几百张，它只上传当下folder的pictures</p>
</blockquote>
<p>参考链接：<a href="https://cloud.tencent.com/developer/article/1801576">https://cloud.tencent.com/developer/article/1801576</a></p>
<h2 id="4、阿里云OSS图床，最终方案"><a class="header-anchor" href="#4、阿里云OSS图床，最终方案">¶</a>4、阿里云OSS图床，最终方案</h2>
<h3 id="4-1-开通OSS对象存储"><a class="header-anchor" href="#4-1-开通OSS对象存储">¶</a>4.1 开通OSS对象存储</h3>
<p>在阿里云官网OSS <a href="https://www.aliyun.com/product/oss">对象存储OSS_云存储服务_-阿里云 (aliyun.com)</a> 点击 “立即开通”</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070032355.png" alt="image-20221206233659678" style="zoom:80%;" />
<p>注册账户，实名。  （如果是新用户，还可以超低价买云服务器，可以用来练习Linux命令、部署网站等）</p>
<p>点击oss页面 “管理控制台”</p>
<h3 id="4-2-创建Bucket"><a class="header-anchor" href="#4-2-创建Bucket">¶</a>4.2 创建Bucket</h3>
<p>在<a href="https://oss.console.aliyun.com/bucket">OSS管理控制台 (aliyun.com)</a> 创建Bucket</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070032356.png" alt="image-20221206234124640" style="zoom:80%;" />
<blockquote>
<ol>
<li>Bucket名称不能有大写字母，不能中文。 建议全小写英文，中间以<code>-</code>连接。如 <code>blog-img-oss</code></li>
<li>服务器选离自己近的</li>
<li>Endpoint默认，所属资源组默认</li>
<li>存储类型： <strong>标准存储</strong>（因为博客网所需流量和容量大，如果访问很少选<u>低频访问存储</u>）</li>
<li>读写权限： 一定要是<strong>公共读</strong>！ (私有别人看不了你图片，公共读写太危险)</li>
<li>其余的，都不听不要不开通！！ HDFS服务、冗余存储、版本控制、加密方式、日志查询、定时备份</li>
</ol>
</blockquote>
<p>复制你的地域节点，如<code>oss-cn-beijing</code> ，后面的 <code>.aliyuncs.com</code> 不复制。</p>
<h3 id="4-3-复制AccessKey和AccessKeySecret"><a class="header-anchor" href="#4-3-复制AccessKey和AccessKeySecret">¶</a>4.3 复制AccessKey和AccessKeySecret</h3>
<p>依次点击 <u>头像</u> -&gt; AccessKey管理 -&gt; 继续使用AccessKey -&gt; 创建AccessKey</p>
<p>一系列操作后，复制你的<code>accessKeyId</code>和<code>accessKeySecret</code></p>
<p><img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070004317.png" alt=""></p>
<h3 id="4-4-充钱"><a class="header-anchor" href="#4-4-充钱">¶</a>4.4 充钱</h3>
<p>见名知意，阿里云首页-&gt;费用</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070008232.png" alt="image-20221207000842470" style="zoom:80%;" />
<p>主要分容量和流量(流入/留出)，费用很便宜</p>
<ul>
<li>容量：0.12元/GB/月</li>
<li>图片<strong>上传</strong>到阿里OSS流量：免费</li>
<li>用户查看你的博客图片，<strong>流出</strong>流量： 闲时<u>0.25元/GB</u>，忙时<u>0.50元/GB</u></li>
</ul>
<h3 id="4-5-PicGo图床设置"><a class="header-anchor" href="#4-5-PicGo图床设置">¶</a>4.5 PicGo图床设置</h3>
<p>刚复制的那些内容派上用场了，点击确定，设为默认图床。</p>
<p>PicGo设置开启 “时间戳重命名”</p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070016467.png" alt="image-20221207001600070" style="zoom:80%;" />
<h3 id="4-6-Typora设置"><a class="header-anchor" href="#4-6-Typora设置">¶</a>4.6 Typora设置</h3>
<p>验证成功，直接在Typora粘贴图片，自动由PicGo上传到OSS。</p>
<p>图片链接如：<a href="https://xn--Bucket-on9im33a.xn--6qq04ao0deyay3ll6f.aliyuncs.com/%E4%BD%A0%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/%E5%9B%BE%E7%89%87%E5%90%8D">https://你Bucket名.你存储区域名.aliyuncs.com/你存储路径/图片名</a></p>
<img src="https://oss-hexo-blog.oss-cn-shanghai.aliyuncs.com/images/202212070022192.png" alt="image-20221207002129577" style="zoom:80%;" />
<h1>百度/谷歌收录网站</h1>
<p>好累，不打字了，看看我辛苦找的其他文章吧</p>
<p>参考链接：  跳转前可以给我点一个赞吗，拜托拜托`(<em>&gt;﹏&lt;</em>)′</p>
<p><a href="https://www.ancii.com/avcwpl4d6/">搭建Hexo博客进阶篇–API和一些小部件</a></p>
<p><a href="https://yogwang.site/2020/How-to-make-GithubPage-included-by-Baidu/">https://yogwang.site/2020/How-to-make-GithubPage-included-by-Baidu/</a></p>
<h1>注意点</h1>
<h2 id="1-主题配置文件和Hexo配置文件的区别"><a class="header-anchor" href="#1-主题配置文件和Hexo配置文件的区别">¶</a>1. 主题配置文件和Hexo配置文件的区别</h2>
<ul>
<li>Hexo配置文件： 主配置文件，只有一个，blog目录下 <code>_config.yml</code></li>
<li>主题配置文件： 每种主题都有一个， blog目录下 <code>themes\主题名\_config.yml</code></li>
</ul>
<h2 id="2-常用图片放本地，并压缩"><a class="header-anchor" href="#2-常用图片放本地，并压缩">¶</a>2. 常用图片放本地，并压缩</h2>
<p>类似于avatar头像，图片favicon.png，背景图片这样的，就别放阿里云OSS了，流量伤不起呀，当然土豪当我没说。</p>
<p>推荐图片压缩软件：<a href="https://www.fosshub.com/Caesium-Image-Compressor.html">Caesium Image Compressor</a></p>
<p>推荐图片压缩网站：<a href="https://tinypng.com/">TinyPNG – Compress WebP, PNG and JPEG images intelligently</a></p>
<h2 id="3-npm全局安装"><a class="header-anchor" href="#3-npm全局安装">¶</a>3. npm全局安装</h2>
<p>配置前，全局下载在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Roaming\npm</span><br></pre></td></tr></table></figure>
<p>配置后，全局下载的在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\admin\AppData\Roaming\nvm\v18.12.0\node_global</span><br></pre></td></tr></table></figure>
<p>当使用 <code>npm install hexo-asset-img --save</code> 这类带 <code>--save</code>的命令，不要再加上<code>-g</code> 全局安装</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Tutorial</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2022/01/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1>第一章</h1>
<p>内<code>容</code>…</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">    world</span><br></pre></td></tr></table></figure>
<h1>第二章</h1>
<blockquote>
<p>hello</p>
</blockquote>
<h2 id="2-1-标题"><a class="header-anchor" href="#2-1-标题">¶</a>2.1 标题</h2>
<ul>
<li>内容</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm管理NodeJS</title>
    <url>/2022/11/05/nvm%E7%AE%A1%E7%90%86NodeJS/</url>
    <content><![CDATA[<h1>nvm管理NodeJs</h1>
<h2 id="nvm安装配置"><a class="header-anchor" href="#nvm安装配置">¶</a>nvm安装配置</h2>
<p>推荐使用NodeJs的版本管理工具nvm，安装node更容易，允许多个node版本共存，切换方便。</p>
<p><strong>完全卸载NodeJS</strong> ：</p>
<ol>
<li>控制面板卸载NodeJS，更推荐使用Geek Uninstaller和Wise Program Uninstaller</li>
<li>重启任务管理器，鲨掉所有与node有关进程。</li>
<li>删掉 <code>C:\Users\admin\.npmrc</code> 文件</li>
<li>寻找以下目录删掉
<ul>
<li>C:\Program Files (x86)\nodejs</li>
<li>C:\Program Files\nodejs</li>
<li>C:\Users\用户名\AppData\Roaming\npm</li>
<li>C:\Users\用户名\AppData\Roaming\npm-cache</li>
</ul>
</li>
<li>删有关node的环境变量。</li>
</ol>
<p><strong>下载安装nvm</strong>：</p>
<p>下载前确定node已经卸载干净。到<a href="https://github.com/coreybutler/nvm-windows/releases">github.com</a> 该网址的下载nvm-setup.zip或nvm-setup.exe</p>
<p>双击安装exe，一路猛戳下一步，默认下载到 <code>C:\Users\用户\AppData\Roaming\nvm</code></p>
<blockquote>
<p>安装好nvm后，由于国内下载速度慢，所以使用淘宝镜像。在nvm安装目录下找到settings.txt文件。在最后面回车加上：</p>
<p>node_mirror: <a href="http://npm.taobao.org/mirrors/node/">http://npm.taobao.org/mirrors/node/</a></p>
<p>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p>
</blockquote>
<p><strong>nvm常用命令</strong> ：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">list</span>   				看本地有哪些版本NodeJs，正在使用的NodeJs会用*号标识</span><br><span class="line">nvm <span class="built_in">list</span> available    		看网上有哪些可以下载的node版本</span><br><span class="line">nvm install <span class="number">16.16</span><span class="number">.0</span>    		下载<span class="number">16.16</span><span class="number">.0</span>版本的NodeJs到nvm安装目录</span><br><span class="line">nvm uninstall <span class="number">16.16</span><span class="number">.0</span>  		 卸载<span class="number">16</span>。<span class="number">16.0</span>的NodeJs    </span><br><span class="line">nvm use <span class="number">16.16</span><span class="number">.0</span>   使用node    </span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="https://blog.csdn.net/lewky_liu/article/details/87959839">Windows完全卸载node.js并安装node.js的多版本管理工具nvm</a></p>
<h2 id="NodeJS"><a class="header-anchor" href="#NodeJS">¶</a>NodeJS</h2>
<p><strong>NodeJS介绍</strong>：简称 <code>node</code> ，类似后端语言的JavaScript环境，本质上是浏览器底层，自带的包管理器npm在前端能充当Maven一样的角色。</p>
<p><strong>node版本</strong>：2022年Hexo要求<u>Node版本必须14以上</u>，推荐16或18，太高或者太低都不好。 另外，Node版本选双不选单。</p>
<p><strong>下载安装</strong>： 直接用nvm下载node</p>
<blockquote>
<p>切换node或是<code>nvm use 16.16.0</code> 之前，需要先把<code>C:\Users\用户\.npmrc</code> 文件删掉，就像之前的卸载node一样。</p>
<p>再执行以下命令</p>
<p>npm cache clean --force                  清理缓存</p>
<p>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a>       node使用淘宝代理链接</p>
<p>npm config set cache “C:\Users\用户\AppData\Roaming\nvm\v版本号\node_cache”     node_cache文件夹没有则新建</p>
<p>npm config set prefix “C:\Users\用户\AppData\Roaming\nvm\v版本号\node_global”      node_global文件夹没有则新建</p>
</blockquote>
<p><strong>node和npm常用命令</strong> ：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">node -v    		看node版本</span><br><span class="line">npm -v    		看npm版本</span><br><span class="line">npm config <span class="built_in">list</span>   			看npm配置项    </span><br><span class="line">npm config get registry     看是否在使用淘宝代理链接</span><br><span class="line">npm install 某           下载某依赖</span><br><span class="line">npm uninstall 某 -g       全局下载某依赖    </span><br><span class="line">npm uninstall 某  		卸载某依赖    </span><br></pre></td></tr></table></figure>
<p>参考链接：跳转前可以给我点一个赞吗，拜托拜托`(<em>&gt;﹏&lt;</em>)′  <a href="https://blog.csdn.net/Kenvinxu/article/details/106053210">https://blog.csdn.net/Kenvinxu/article/details/106053210</a></p>
<p>官网版本：<a href="https://nodejs.org/zh-cn/download/releases/">以往的版本 | Node.js (nodejs.org)</a></p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>nvm</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
